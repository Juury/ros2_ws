#!/usr/bin/env python3

import rclpy
from copy import deepcopy
from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult

def main():
    rclpy.init()

    navigator = BasicNavigator()

    # -------------------------------------------------------------
    # 1) Define a list of (x,y) positions for your inspection route
    # -------------------------------------------------------------
    # For demonstration, here's a small route. Replace with your own coords.
    inspection_route = [
        [1.088, 0.0],
        [2.10, 0.79],
        [0.859, 0.70],
    ]

    # -------------------------------------------------------------
    # 2) Set the robot's initial pose (optional but recommended)
    # -------------------------------------------------------------
    initial_pose = PoseStamped()
    initial_pose.header.frame_id = 'map'
    initial_pose.header.stamp = navigator.get_clock().now().to_msg()

    # Example: Start near (x=0.0, y=0.0) with a certain orientation
    initial_pose.pose.position.x = 0.0
    initial_pose.pose.position.y = 0.0
    # Orientation (z,w) for yaw=0.0
    initial_pose.pose.orientation.z = 0.0
    initial_pose.pose.orientation.w = 1.0

    # Tell the navigator our initial pose
    navigator.setInitialPose(initial_pose)

    # Wait for Nav2 to activate
    navigator.waitUntilNav2Active()
    print("Nav2 is active; starting waypoint navigation.")

    # -------------------------------------------------------------
    # 3) Convert the route list to PoseStamped waypoints
    # -------------------------------------------------------------
    inspection_points = []
    for xy in inspection_route:
        pose = PoseStamped()
        pose.header.frame_id = 'map'
        pose.header.stamp = navigator.get_clock().now().to_msg()

        pose.pose.position.x = xy[0]
        pose.pose.position.y = xy[1]

        # We'll keep orientation facing "straight up" (0 radians) as an example.
        # If you want the robot to face a certain direction, set pose.pose.orientation.
        pose.pose.orientation.z = 0.0
        pose.pose.orientation.w = 1.0

        inspection_points.append(deepcopy(pose))

    # -------------------------------------------------------------
    # 4) Follow Waypoints
    # -------------------------------------------------------------
    navigator.followWaypoints(inspection_points)

    # Optionally do something else while robot is traveling
    i = 0
    while not navigator.isTaskComplete():
        feedback = navigator.getFeedback()
        i += 1
        # Just a simple example to print status every 5 feedback cycles
        if feedback and i % 5 == 0:
            print(f'Executing current waypoint: '
                  f'{feedback.current_waypoint + 1}/{len(inspection_points)}')

    # Check final result
    result = navigator.getResult()
    if result == TaskResult.SUCCEEDED:
        print('Inspection route complete!')
    elif result == TaskResult.CANCELED:
        print('Route was canceled!')
    elif result == TaskResult.FAILED:
        print('Route failed!')

    # -------------------------------------------------------------
    # 5) (Optional) Return to Start
    # -------------------------------------------------------------
    # If youâ€™d like to automatically return to the initial pose:
    initial_pose.header.stamp = navigator.get_clock().now().to_msg()
    navigator.goToPose(initial_pose)
    while not navigator.isTaskComplete():
        pass

    print("Done! Shutting down.")
    rclpy.shutdown()


if __name__ == '__main__':
    main()

